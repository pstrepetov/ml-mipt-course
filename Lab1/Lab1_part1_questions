{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3MTTauSkholN"
   },
   "source": [
    "*Credits: materials from this notebook belong to YSDA [Practical DL](https://github.com/yandexdataschool/Practical_DL) course. Special thanks for making them available online.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-mKb10IBholS"
   },
   "source": [
    "# Lab assignment №1, part 1\n",
    "\n",
    "This lab assignment consists of several parts. You are supposed to make some transformations, train some models, estimate the quality of the models and explain your results.\n",
    "\n",
    "Several comments:\n",
    "* Don't hesitate to ask questions, it's a good practice.\n",
    "* No private/public sharing, please. The copied assignments will be graded with 0 points.\n",
    "* Blocks of this lab will be graded separately."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "AN_z1ByYholT"
   },
   "source": [
    "## 1. Matrix differentiation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tCTyTNgFholU"
   },
   "source": [
    "Since it easy to google every task please please please try to undestand what's going on. The \"just answer\" thing will be not counted, make sure to present derivation of your solution. It is absolutely OK if you found an answer on web then just exercise in $\\LaTeX$ copying it into here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TxMw2jN8holU"
   },
   "source": [
    "Useful links: \n",
    "[1](http://www.machinelearning.ru/wiki/images/2/2a/Matrix-Gauss.pdf)\n",
    "[2](http://www.atmos.washington.edu/~dennis/MatrixCalculus.pdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WBld3Z79holV"
   },
   "source": [
    "## ex. 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3J-keTerholV"
   },
   "source": [
    "$$  \n",
    "y = x^Tx,  \\quad x \\in \\mathbb{R}^N \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4tD0egHOholV"
   },
   "source": [
    "$$\n",
    "\\frac{dy}{dx} = \\: ?\n",
    "$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "id": "lgv5ewCeholW",
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "source": [
    "#### Solution:\n",
    "By definition\n",
    "$$ y = \\displaystyle\\sum_{i=1}^{N} x_i^2 $$\n",
    "Differentiating with respect to the $kth$ element of $x$ we have\n",
    "$$\n",
    "\\frac{\\partial y}{\\partial x_j} = \\frac{\\partial}{\\partial x_j}(\\displaystyle\\sum_{i=1}^{N} x_i^2) = \\frac{\\partial}{\\partial x_j}(x_j^2) = 2x_j\n",
    "$$\n",
    "Then\n",
    "$$\n",
    "\\frac{dy}{dx} = 2x^T\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RqCTP0XDholX"
   },
   "source": [
    "## ex. 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Nz9OpfOjholX"
   },
   "source": [
    "$$ y = tr(AB) \\quad A,B \\in \\mathbb{R}^{N \\times N} $$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uAJmyo1AholX"
   },
   "source": [
    "$$\n",
    "\\frac{dy}{dA} = \\: ?\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "id": "lu44z4odholY",
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "source": [
    "#### Solution:\n",
    "By definition\n",
    "$$\n",
    "y = \\displaystyle\\sum_{i=1}^{N}\\displaystyle\\sum_{j=1}^{N} a_{ij} b_{ji}\n",
    "$$\n",
    "for all $p, q = 1, 2, . . . , N,$ it follows that\n",
    "$$\n",
    "\\frac{\\partial y}{\\partial a_{pq}} = \\frac{\\partial}{\\partial a_{pq}}(\\displaystyle\\sum_{i=1}^{N}\\displaystyle\\sum_{j=1}^{N} a_{ij} b_{ji}) = b_{qp}\n",
    "$$\n",
    "Then \n",
    "$$\n",
    "\\frac{dy}{dA} = B\n",
    "$$\n",
    "(In my solutions I used Numerator-layout notation, which lays out $\\displaystyle\\frac{dy}{dX}$ according to $X^T$, like [here](https://en.wikipedia.org/wiki/Matrix_calculus#Numerator-layout_notation))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7BblMQyIholY"
   },
   "source": [
    "## ex. 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HrXGNVuWholY"
   },
   "source": [
    "$$  \n",
    "y = x^TAc , \\quad A\\in \\mathbb{R}^{N \\times N}, x\\in \\mathbb{R}^{N}, c\\in \\mathbb{R}^{N} \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "31Vy5wL4holY"
   },
   "source": [
    "$$\n",
    "\\frac{dy}{dx} = \\: ?\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "iWttUQOzholZ"
   },
   "source": [
    "$$\n",
    "\\frac{dy}{dA} = \\: ?\n",
    "$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NPW6gpUXholZ"
   },
   "source": [
    "Hint for the latter (one of the ways): use *ex. 2* result and the fact \n",
    "$$\n",
    "tr(ABC) = tr (CAB)\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "id": "UQPLzyvUholZ",
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "source": [
    "#### Solution:\n",
    "\n",
    "By definition\n",
    "$$\n",
    "y = \\displaystyle\\sum_{j=1}^{N}\\displaystyle\\sum_{i=1}^{N} x_i a_{ij} c_j\n",
    "$$\n",
    "1) Differentiating with respect to the $kth$ element of $x$ we have\n",
    "$$\n",
    "\\frac{\\partial y}{\\partial x_k} = \\frac{\\partial}{\\partial x_k}(\\displaystyle\\sum_{j=1}^{N}\\displaystyle\\sum_{i=1}^{N} x_i a_{ij} c_j) = \\displaystyle\\sum_{j=1}^{N} a_{kj} c_j\n",
    "$$\n",
    "for all $k = 1, 2, . . . , n,$ and consequently,\n",
    "$$\n",
    "\\frac{dy}{dx} = с^TA^T\n",
    "$$\n",
    "2) For all $p, q = 1, 2, . . . , N,$\n",
    "$$\n",
    "\\frac{\\partial y}{\\partial a_{pq}} = \\frac{\\partial}{\\partial a_{pq}}(\\displaystyle\\sum_{j=1}^{N}\\displaystyle\\sum_{i=1}^{N} x_i a_{ij} c_j) = x_p c_q\n",
    "$$\n",
    "Then\n",
    "$$\n",
    "\\frac{dy}{dA} = cx^T\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "iuLydfINholZ"
   },
   "source": [
    "## ex. 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "k_WtiCmGholZ"
   },
   "source": [
    "Classic matrix factorization example. Given matrix $X$ you need to find $A$, $S$ to approximate $X$. This can be done by simple gradient descent iteratively alternating $A$ and $S$ updates.\n",
    "$$\n",
    "J = || X - AS ||_F^2  , \\quad A\\in \\mathbb{R}^{N \\times R} , \\quad S\\in \\mathbb{R}^{R \\times M}\n",
    "$$\n",
    "$$\n",
    "\\frac{dJ}{dS} = ? \n",
    "$$\n",
    "\n",
    "You may use one of the following approaches:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pYvyj-8zhola"
   },
   "source": [
    "#### First approach\n",
    "Using ex.2 and the fact:\n",
    "$$\n",
    "|| X ||_F^2 = tr(XX^T) \n",
    "$$ \n",
    "it is easy to derive gradients (you can find it in one of the refs). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "f7ZafGc3hola"
   },
   "source": [
    "#### Second approach\n",
    "You can use *slightly different techniques* if they suits you. Take a look at this derivation:\n",
    "<img src=\"https://github.com/girafe-ai/ml-course/blob/22f_basic/homeworks/lab01_ml_pipeline/grad.png?raw=1\">\n",
    "(excerpt from [Handbook of blind source separation, Jutten, page 517](https://books.google.ru/books?id=PTbj03bYH6kC&printsec=frontcover&dq=Handbook+of+Blind+Source+Separation&hl=en&sa=X&ved=0ahUKEwi-q_apiJDLAhULvXIKHVXJDWcQ6AEIHDAA#v=onepage&q=Handbook%20of%20Blind%20Source%20Separation&f=false), open for better picture)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DjM6_Gzbhola"
   },
   "source": [
    "#### Third approach\n",
    "And finally we can use chain rule! \n",
    "let $ F = AS $ \n",
    "\n",
    "**Find**\n",
    "$$\n",
    "\\frac{dJ}{dF} =\n",
    "$$\n",
    "\n",
    "and \n",
    "\n",
    "$$\n",
    "\\frac {dF}{dS}=\n",
    "$$\n",
    "(the shape should be $ NM \\times RM )$.\n",
    "\n",
    "Now it is easy do get desired gradients:\n",
    "$$\n",
    "\\frac{dJ}{dS} =\n",
    "$$\n",
    "\n",
    "\n",
    "I'll use 2nd approach:\n",
    "\n",
    "\n",
    "Let $$B = X - AS$$ \n",
    "then\n",
    "$$||B||^2_F = tr(BB^T)$$\n",
    "\n",
    "$$\\frac{dBB^T}{db_{ij}} = \\frac{d}{db_{ij}}\\sum\\limits^{N}_{i = 1}\\sum\\limits_{k=1}^{N}b_{ik}^2 = 2b_{ij} \\Rightarrow \\frac{dBB^T}{dB} = 2B$$\n",
    "\n",
    "$$\\frac{dB}{dS} = \\frac{d(X - AS)}{dS} = -A^T$$\n",
    "\n",
    "$$\\frac{dJ}{dS} = \\frac{d||X - AS||^2_F}{dS} = \\frac{dBB^T}{dB}\\frac{dB}{dS} = -2A^TB = -2A^T(X - AS) $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "id": "Cej8U8Jaholb",
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "source": [
    "## 2. kNN questions\n",
    "Here come the questions from the assignment0_01. Please, refer to the assignment0_01 to get the context of the questions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zKPY5w7Dholb"
   },
   "source": [
    "### Question 1\n",
    "\n",
    "Notice the structured patterns in the distance matrix, where some rows or columns are visible brighter. (Note that with the default color scheme black indicates low distances while white indicates high distances.)\n",
    "\n",
    "- What in the data is the cause behind the distinctly bright rows?\n",
    "- What causes the columns?\n",
    "\n",
    "*Your Answer:*\n",
    "\n",
    "- This test data may contain images very different from other, for example colors of most pixels in the picture may be white\n",
    "- This training data have no similarities with test data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PqgclNpmholb"
   },
   "source": [
    "### Question 2\n",
    "\n",
    "We can also use other distance metrics such as L1 distance.\n",
    "For pixel values $p_{ij}^{(k)}$ at location $(i,j)$ of some image $I_k$, \n",
    "\n",
    "the mean $\\mu$ across all pixels over all images is $$\\mu=\\frac{1}{nhw}\\sum_{k=1}^n\\sum_{i=1}^{h}\\sum_{j=1}^{w}p_{ij}^{(k)}$$\n",
    "And the pixel-wise mean $\\mu_{ij}$ across all images is \n",
    "$$\\mu_{ij}=\\frac{1}{n}\\sum_{k=1}^np_{ij}^{(k)}.$$\n",
    "The general standard deviation $\\sigma$ and pixel-wise standard deviation $\\sigma_{ij}$ is defined similarly.\n",
    "\n",
    "Which of the following preprocessing steps will not change the performance of a Nearest Neighbor classifier that uses L1 distance? Select all that apply.\n",
    "1. Subtracting the mean $\\mu$ ($\\tilde{p}_{ij}^{(k)}=p_{ij}^{(k)}-\\mu$.)\n",
    "2. Subtracting the per pixel mean $\\mu_{ij}$  ($\\tilde{p}_{ij}^{(k)}=p_{ij}^{(k)}-\\mu_{ij}$.)\n",
    "3. Subtracting the mean $\\mu$ and dividing by the standard deviation $\\sigma$.\n",
    "4. Subtracting the pixel-wise mean $\\mu_{ij}$ and dividing by the pixel-wise standard deviation $\\sigma_{ij}$.\n",
    "5. Rotating the coordinate axes of the data.\n",
    "\n",
    "*Your Answer:*\n",
    "1.,2.,3.\n",
    "\n",
    "*Your Explanation:*\n",
    "1. Distance will not change, because $\\displaystyle\\sum_{i,j=1}^{8}\\parallel \\tilde{p}_{ij}^{(k)} - \\tilde{p}_{ij}^{(n)}\\parallel_1 = \\displaystyle\\sum_{i,j=1}^{8}\\parallel p_{ij}^{(k)} - \\mu - p_{ij}^{(n)} + \\mu\\parallel_1 = \\displaystyle\\sum_{i,j=1}^{8}\\parallel p_{ij}^{(k)} - p_{ij}^{(n)}\\parallel_1$ \n",
    "2. Distance will not change: $\\displaystyle\\sum_{i,j=1}^{8}\\parallel \\tilde{p}_{ij}^{(k)} - \\tilde{p}_{ij}^{(n)}\\parallel_1 = \\displaystyle\\sum_{i,j=1}^{8}\\parallel p_{ij}^{(k)} - \\mu_{ij} - p_{ij}^{(n)} + \\mu_{ij}\\parallel_1 = \\displaystyle\\sum_{i,j=1}^{8}\\parallel p_{ij}^{(k)} - p_{ij}^{(n)}\\parallel_1$\n",
    "3. Performance will not change, because only distance values will change, but not relation between them:\n",
    "\n",
    "let $\\; \\displaystyle\\sum_{i,j=1}^{8}\\parallel p_{ij}^{(k)} - p_{ij}^{(n)}\\parallel_1 \\leq \\displaystyle\\sum_{i,j=1}^{8}\\parallel p_{ij}^{(k)} - p_{ij}^{(m)}\\parallel_1 \\; \\longrightarrow$ \n",
    "\n",
    "$$\\displaystyle\\sum_{i,j=1}^{8}\\parallel \\tilde{p}_{ij}^{(k)} - \\tilde{p}_{ij}^{(n)}\\parallel_1 = \\displaystyle\\sum_{i,j=1}^{8}\\parallel \\frac{p_{ij}^{(k)} - \\mu}{\\sigma} - \\frac{p_{ij}^{(n)} - \\mu}{\\sigma}\\parallel_1 = \\frac{1}{\\sigma}\\displaystyle\\sum_{i,j=1}^{8}\\parallel p_{ij}^{(k)} - p_{ij}^{(n)} \\parallel_1 \\leq\\frac{1}{\\sigma}\\displaystyle\\sum_{i,j=1}^{8}\\parallel p_{ij}^{(k)} - p_{ij}^{(m)}\\parallel_1 = \\displaystyle\\sum_{i,j=1}^{8}\\parallel \\frac{p_{ij}^{(k)} - \\mu}{\\sigma} - \\frac{p_{ij}^{(m)} - \\mu}{\\sigma}\\parallel_1 = \\displaystyle\\sum_{i,j=1}^{8}\\parallel \\tilde{p}_{ij}^{(k)} - \\tilde{p}_{ij}^{(m)}\\parallel_1$$\n",
    "\n",
    "4. \n",
    "Let's take 3 2x2 pics as an example: 1st will be $\\begin{bmatrix} 2&0\\\\ 0&2\\end{bmatrix}$, 2nd $\\begin{bmatrix} 1&3\\\\ 0&0\\end{bmatrix}$ and 3rd $\\begin{bmatrix} 1&1\\\\ 1&1\\end{bmatrix}.$ \n",
    "We will count usual distances and then compare them with new distances:\n",
    "\n",
    "$$\n",
    "dist(1,3) = 1+1+1+1=4\n",
    "$$\n",
    "$$\n",
    "dist(2,3) = 0+2+1+1=4\n",
    "$$\n",
    "$$\n",
    "\\mu_{11} = \\frac{4}{3};\\; \\mu_{12} = \\frac{4}{3}; \\;\\mu_{21} = \\frac{1}{3}; \\;\\mu_{22} = 1 \n",
    "$$\n",
    "$$\n",
    "\\sigma_{11} = \\sqrt{\\frac{1}{3}\\cdot(\\frac{4}{9} + \\frac{1}{9} + \\frac{1}{9})} = \\frac{\\sqrt{2}}{3}$$\n",
    "$$\\sigma_{12} = \\sqrt{\\frac{1}{3}\\cdot(\\frac{16}{9} + \\frac{25}{9} + \\frac{1}{9})} = \\frac{\\sqrt{14}}{3}$$\n",
    "$$\\sigma_{21} = \\sqrt{\\frac{1}{3}\\cdot(\\frac{1}{9} + \\frac{1}{9} + \\frac{4}{9})} = \\frac{\\sqrt{2}}{3}$$\n",
    "$$\\sigma_{22} = \\sqrt{\\frac{1}{3}\\cdot(1 + 1 + 0)} = \\sqrt{\\frac{2}{3}}$$\n",
    "$$\n",
    "dist_4(1,3) = \\frac{1*3}{\\sqrt{2}} + \\frac{1*3}{\\sqrt{14}} + \\frac{1*3}{\\sqrt{2}} + \\sqrt{\\frac{3}{2}} \n",
    "$$\n",
    "$$\n",
    "dist_4(2,3) = 0 + \\frac{2*3}{\\sqrt{14}} + \\frac{1*3}{\\sqrt{2}} + \\sqrt{\\frac{3}{2}}\n",
    "$$\n",
    "\n",
    "Usual distances are equal, but new are not, which means the performance will change\n",
    "\n",
    "5. Performance will change, because L1-distances not remain the same. For example, take 3 points on 2D plane:\n",
    "$$A(0,1), B(0,2), C(1,1)$$\n",
    "$$\\parallel AB\\parallel_1 = \\parallel BC\\parallel_1 = 1$$\n",
    "Let's rotate axes on $30^\\circ$: $A' = \\begin{bmatrix} \\frac{\\sqrt{3}}{2}&\\frac{-1}{2}\\\\ \\frac{1}{2}&\\frac{\\sqrt{3}}{2}\\end{bmatrix} \\cdot (0,1)^{T} = (\\frac{-1}{2}, \\frac{\\sqrt{3}}{2})$, $B' = \\begin{bmatrix} \\frac{\\sqrt{3}}{2}&\\frac{-1}{2}\\\\ \\frac{1}{2}&\\frac{\\sqrt{3}}{2}\\end{bmatrix} \\cdot (0,2)^{T} = (-1, \\sqrt{3})$, $C' = \\begin{bmatrix} \\frac{\\sqrt{3}}{2}&\\frac{-1}{2}\\\\ \\frac{1}{2}&\\frac{\\sqrt{3}}{2}\\end{bmatrix} \\cdot (1,1)^{T} = (\\frac{\\sqrt{3} - 1}{2}, \\frac{\\sqrt{3}+1}{2})$\n",
    "\n",
    "$$\\parallel A'B'\\parallel_1 = \\frac{1+\\sqrt{3}}{2} \\neq \\sqrt{3} = \\parallel B'C' \\parallel_1$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ufmvfpUZholc"
   },
   "source": [
    "## Question 3\n",
    "\n",
    "Which of the following statements about $k$-Nearest Neighbor ($k$-NN) are true in a classification setting, and for all $k$? Select all that apply.\n",
    "1. The decision boundary (hyperplane between classes in feature space) of the k-NN classifier is linear.\n",
    "2. The training error of a 1-NN will always be lower than that of 5-NN.\n",
    "3. The test error of a 1-NN will always be lower than that of a 5-NN.\n",
    "4. The time needed to classify a test example with the k-NN classifier grows with the size of the training set.\n",
    "5. None of the above.\n",
    "\n",
    "*Your Answer:* 2., 4.\n",
    "\n",
    "*Your Explanation:*\n",
    "1. Wrong statement, because we can consider 2 classes with 1 feature: 1st is a circle-shaped and 2nd is a plane around it, the boundary will be non-linear.\n",
    "2. Right, because in 1-NN on training set nearest neighbour for every object is this particular object, which means error is 0, but in 5-NN on training set error will be higher (if there are not only one class)\n",
    "3. Wrong statement. We may take a training set {1,2,3,4,5} with classes {1,1,1,1,2} and a test set {6} with class {1}. 1-NN error is 100%, because it will predict 2 based on nearest neighbour '5', but 5-NN error will be 0% on this set\n",
    "4. Right, because kNN needs to sort distances to get the nearest neighbours, and sort time depends on number of objects as we know.\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
